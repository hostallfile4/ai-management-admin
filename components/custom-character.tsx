"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import { User, Palette, Save, Eye, Shirt, Heart, Star } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface Character {
  id: string
  name: string
  description: string
  appearance: {
    skinColor: string
    hairColor: string
    eyeColor: string
    height: number
    build: "slim" | "average" | "muscular"
  }
  personality: {
    traits: string[]
    mood: string
    energy: number
    friendliness: number
  }
  clothing: {
    style: string
    colors: string[]
    accessories: string[]
  }
  background: {
    occupation: string
    hobbies: string[]
    backstory: string
  }
}

export function CustomCharacter() {
  const [characters, setCharacters] = useState<Character[]>([])
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [previewMode, setPreviewMode] = useState(false)

  const [newCharacter, setNewCharacter] = useState<Partial<Character>>({
    name: "",
    description: "",
    appearance: {
      skinColor: "#F4C2A1",
      hairColor: "#8B4513",
      eyeColor: "#654321",
      height: 170,
      build: "average",
    },
    personality: {
      traits: [],
      mood: "‡¶ñ‡ßÅ‡¶∂‡¶ø",
      energy: 50,
      friendliness: 50,
    },
    clothing: {
      style: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶ú‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤",
      colors: ["#0066CC", "#FFFFFF"],
      accessories: [],
    },
    background: {
      occupation: "",
      hobbies: [],
      backstory: "",
    },
  })

  const personalityTraits = [
    "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£",
    "‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶®",
    "‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤",
    "‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ",
    "‡¶¶‡¶Ø‡¶º‡¶æ‡¶≤‡ßÅ",
    "‡¶π‡¶æ‡¶∏‡ßç‡¶Ø‡¶∞‡¶∏‡¶ø‡¶ï",
    "‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡¶∂‡ßÄ‡¶≤",
    "‡¶â‡ßé‡¶∏‡¶æ‡¶π‡ßÄ",
    "‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø",
    "‡¶Ö‡¶≠‡¶ø‡¶Ø‡¶æ‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º",
  ]

  const clothingStyles = ["‡¶ï‡ßç‡¶Ø‡¶æ‡¶ú‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤", "‡¶´‡¶∞‡ßç‡¶Æ‡¶æ‡¶≤", "‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶¨‡¶æ‡¶π‡ßÄ", "‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï", "‡¶∏‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶∏", "‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü‡¶ø‡¶ï"]

  const accessories = ["‡¶ö‡¶∂‡¶Æ‡¶æ", "‡¶ü‡ßÅ‡¶™‡¶ø", "‡¶ó‡¶π‡¶®‡¶æ", "‡¶ò‡¶°‡¶º‡¶ø", "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ó", "‡¶∏‡ßç‡¶ï‡¶æ‡¶∞‡ßç‡¶´", "‡¶¨‡ßá‡¶≤‡ßç‡¶ü"]

  const hobbies = [
    "‡¶™‡¶°‡¶º‡¶æ",
    "‡¶≤‡ßá‡¶ñ‡¶æ",
    "‡¶ó‡¶æ‡¶®",
    "‡¶®‡¶æ‡¶ö",
    "‡¶∞‡¶æ‡¶®‡ßç‡¶®‡¶æ",
    "‡¶≠‡ßç‡¶∞‡¶Æ‡¶£",
    "‡¶´‡¶ü‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø",
    "‡¶ñ‡ßá‡¶≤‡¶æ‡¶ß‡ßÅ‡¶≤‡¶æ",
    "‡¶ó‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶®‡¶ø‡¶Ç",
    "‡¶™‡ßá‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶Ç",
    "‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç",
    "‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ",
  ]

  const createCharacter = () => {
    if (!newCharacter.name?.trim()) {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!",
        description: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    const character: Character = {
      id: Date.now().toString(),
      name: newCharacter.name,
      description: newCharacter.description || "",
      appearance: newCharacter.appearance!,
      personality: newCharacter.personality!,
      clothing: newCharacter.clothing!,
      background: newCharacter.background!,
    }

    setCharacters((prev) => [...prev, character])
    setSelectedCharacter(character)
    setShowCreateForm(false)

    // Reset form
    setNewCharacter({
      name: "",
      description: "",
      appearance: {
        skinColor: "#F4C2A1",
        hairColor: "#8B4513",
        eyeColor: "#654321",
        height: 170,
        build: "average",
      },
      personality: {
        traits: [],
        mood: "‡¶ñ‡ßÅ‡¶∂‡¶ø",
        energy: 50,
        friendliness: 50,
      },
      clothing: {
        style: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶ú‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤",
        colors: ["#0066CC", "#FFFFFF"],
        accessories: [],
      },
      background: {
        occupation: "",
        hobbies: [],
        backstory: "",
      },
    })

    toast({
      title: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
      description: `"${character.name}" ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const saveCharacter = () => {
    if (selectedCharacter) {
      const dataStr = JSON.stringify(selectedCharacter, null, 2)
      const dataBlob = new Blob([dataStr], { type: "application/json" })
      const url = URL.createObjectURL(dataBlob)
      const link = document.createElement("a")
      link.href = url
      link.download = `${selectedCharacter.name}-character.json`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

      toast({
        title: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶≠ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üíæ",
        description: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      })
    }
  }

  const toggleTrait = (trait: string) => {
    setNewCharacter((prev) => ({
      ...prev,
      personality: {
        ...prev.personality!,
        traits: prev.personality!.traits.includes(trait)
          ? prev.personality!.traits.filter((t) => t !== trait)
          : [...prev.personality!.traits, trait],
      },
    }))
  }

  const toggleAccessory = (accessory: string) => {
    setNewCharacter((prev) => ({
      ...prev,
      clothing: {
        ...prev.clothing!,
        accessories: prev.clothing!.accessories.includes(accessory)
          ? prev.clothing!.accessories.filter((a) => a !== accessory)
          : [...prev.clothing!.accessories, accessory],
      },
    }))
  }

  const toggleHobby = (hobby: string) => {
    setNewCharacter((prev) => ({
      ...prev,
      background: {
        ...prev.background!,
        hobbies: prev.background!.hobbies.includes(hobby)
          ? prev.background!.hobbies.filter((h) => h !== hobby)
          : [...prev.background!.hobbies, hobby],
      },
    }))
  }

  const CharacterPreview = ({ character }: { character: Character }) => (
    <div className="space-y-4">
      {/* Character Avatar */}
      <div className="text-center">
        <div
          className="w-32 h-32 mx-auto rounded-full flex items-center justify-center text-6xl"
          style={{ backgroundColor: character.appearance.skinColor }}
        >
          <User className="h-16 w-16" style={{ color: character.appearance.hairColor }} />
        </div>
        <h3 className="text-xl font-bold mt-2">{character.name}</h3>
        <p className="text-gray-600">{character.description}</p>
      </div>

      {/* Appearance */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">‡¶ö‡ßá‡¶π‡¶æ‡¶∞‡¶æ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span>‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ:</span>
            <span>{character.appearance.height} ‡¶∏‡ßá‡¶Æ‡¶ø</span>
          </div>
          <div className="flex justify-between">
            <span>‡¶ó‡¶°‡¶º‡¶®:</span>
            <span>
              {character.appearance.build === "slim"
                ? "‡¶ö‡¶ø‡¶ï‡¶®"
                : character.appearance.build === "average"
                  ? "‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï"
                  : "‡¶™‡ßá‡¶∂‡ßÄ‡¶¨‡¶π‡ßÅ‡¶≤"}
            </span>
          </div>
          <div className="flex justify-between items-center">
            <span>‡¶ö‡¶æ‡¶Æ‡¶°‡¶º‡¶æ‡¶∞ ‡¶∞‡¶Ç:</span>
            <div className="w-6 h-6 rounded-full border" style={{ backgroundColor: character.appearance.skinColor }} />
          </div>
          <div className="flex justify-between items-center">
            <span>‡¶ö‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶∞‡¶Ç:</span>
            <div className="w-6 h-6 rounded-full border" style={{ backgroundColor: character.appearance.hairColor }} />
          </div>
          <div className="flex justify-between items-center">
            <span>‡¶ö‡ßã‡¶ñ‡ßá‡¶∞ ‡¶∞‡¶Ç:</span>
            <div className="w-6 h-6 rounded-full border" style={{ backgroundColor: character.appearance.eyeColor }} />
          </div>
        </CardContent>
      </Card>

      {/* Personality */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <span className="text-sm font-medium">‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø:</span>
            <div className="flex flex-wrap gap-1 mt-1">
              {character.personality.traits.map((trait) => (
                <Badge key={trait} variant="outline" className="text-xs">
                  {trait}
                </Badge>
              ))}
            </div>
          </div>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú:</span>
              <span>{character.personality.mood}</span>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span>‡¶∂‡¶ï‡ßç‡¶§‡¶ø:</span>
                <span>{character.personality.energy}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${character.personality.energy}%` }} />
              </div>
            </div>
            <div>
              <div className="flex justify-between mb-1">
                <span>‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨:</span>
                <span>{character.personality.friendliness}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-green-600 h-2 rounded-full"
                  style={{ width: `${character.personality.friendliness}%` }}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Clothing */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">‡¶™‡ßã‡¶∂‡¶æ‡¶ï</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span>‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤:</span>
            <span>{character.clothing.style}</span>
          </div>
          <div>
            <span>‡¶∞‡¶Ç:</span>
            <div className="flex gap-1 mt-1">
              {character.clothing.colors.map((color, index) => (
                <div key={index} className="w-4 h-4 rounded border" style={{ backgroundColor: color }} />
              ))}
            </div>
          </div>
          <div>
            <span>‡¶Ü‡¶®‡ßÅ‡¶∑‡¶æ‡¶ô‡ßç‡¶ó‡¶ø‡¶ï:</span>
            <div className="flex flex-wrap gap-1 mt-1">
              {character.clothing.accessories.map((accessory) => (
                <Badge key={accessory} variant="outline" className="text-xs">
                  {accessory}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Background */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span>‡¶™‡ßá‡¶∂‡¶æ:</span>
            <span>{character.background.occupation || "‡¶Ö‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§"}</span>
          </div>
          <div>
            <span>‡¶∂‡¶ñ:</span>
            <div className="flex flex-wrap gap-1 mt-1">
              {character.background.hobbies.map((hobby) => (
                <Badge key={hobby} variant="outline" className="text-xs">
                  {hobby}
                </Badge>
              ))}
            </div>
          </div>
          {character.background.backstory && (
            <div>
              <span>‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ:</span>
              <p className="text-xs text-gray-600 mt-1">{character.background.backstory}</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞</h2>
          <p className="text-gray-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => setShowCreateForm(true)} className="bg-blue-600 hover:bg-blue-700">
            <User className="h-4 w-4 mr-2" />
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞
          </Button>
          {selectedCharacter && (
            <>
              <Button onClick={() => setPreviewMode(!previewMode)} variant="outline">
                <Eye className="h-4 w-4 mr-2" />
                {previewMode ? "‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ" : "‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â"}
              </Button>
              <Button onClick={saveCharacter} variant="outline">
                <Save className="h-4 w-4 mr-2" />
                ‡¶∏‡ßá‡¶≠
              </Button>
            </>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Character List */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {characters.map((character) => (
                <div
                  key={character.id}
                  className={`p-3 rounded-lg cursor-pointer transition-colors ${
                    selectedCharacter?.id === character.id
                      ? "bg-blue-100 border-2 border-blue-300"
                      : "bg-gray-50 hover:bg-gray-100"
                  }`}
                  onClick={() => setSelectedCharacter(character)}
                >
                  <div className="flex items-center gap-3">
                    <div
                      className="w-8 h-8 rounded-full flex items-center justify-center"
                      style={{ backgroundColor: character.appearance.skinColor }}
                    >
                      <User className="h-4 w-4" style={{ color: character.appearance.hairColor }} />
                    </div>
                    <div>
                      <div className="font-medium text-sm">{character.name}</div>
                      <div className="text-xs text-gray-500">{character.background.occupation}</div>
                    </div>
                  </div>
                </div>
              ))}

              {characters.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <User className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡ßá‡¶á</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Main Content */}
        <div className="lg:col-span-3">
          {selectedCharacter ? (
            previewMode ? (
              <CharacterPreview character={selectedCharacter} />
            ) : (
              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle>‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ: {selectedCharacter.name}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600">‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§</p>
                  </CardContent>
                </Card>
              </div>
            )
          ) : (
            <Card>
              <CardContent className="text-center py-12">
                <User className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-600 mb-2">‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º</h3>
                <p className="text-gray-500 mb-4">‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                <Button onClick={() => setShowCreateForm(true)}>
                  <User className="h-4 w-4 mr-2" />
                  ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      {/* Create Character Modal */}
      {showCreateForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold">‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
                <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                  ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Form */}
                <div className="space-y-6">
                  {/* Basic Info */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <Input
                        placeholder="‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
                        value={newCharacter.name}
                        onChange={(e) => setNewCharacter((prev) => ({ ...prev, name: e.target.value }))}
                      />
                      <Textarea
                        placeholder="‡¶¨‡¶ø‡¶¨‡¶∞‡¶£"
                        value={newCharacter.description}
                        onChange={(e) => setNewCharacter((prev) => ({ ...prev, description: e.target.value }))}
                      />
                    </CardContent>
                  </Card>

                  {/* Appearance */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm flex items-center gap-2">
                        <Palette className="h-4 w-4" />
                        ‡¶ö‡ßá‡¶π‡¶æ‡¶∞‡¶æ
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-3 gap-3">
                        <div>
                          <label className="text-xs font-medium">‡¶ö‡¶æ‡¶Æ‡¶°‡¶º‡¶æ‡¶∞ ‡¶∞‡¶Ç</label>
                          <input
                            type="color"
                            value={newCharacter.appearance?.skinColor}
                            onChange={(e) =>
                              setNewCharacter((prev) => ({
                                ...prev,
                                appearance: { ...prev.appearance!, skinColor: e.target.value },
                              }))
                            }
                            className="w-full h-8 rounded border"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-medium">‡¶ö‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶∞‡¶Ç</label>
                          <input
                            type="color"
                            value={newCharacter.appearance?.hairColor}
                            onChange={(e) =>
                              setNewCharacter((prev) => ({
                                ...prev,
                                appearance: { ...prev.appearance!, hairColor: e.target.value },
                              }))
                            }
                            className="w-full h-8 rounded border"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-medium">‡¶ö‡ßã‡¶ñ‡ßá‡¶∞ ‡¶∞‡¶Ç</label>
                          <input
                            type="color"
                            value={newCharacter.appearance?.eyeColor}
                            onChange={(e) =>
                              setNewCharacter((prev) => ({
                                ...prev,
                                appearance: { ...prev.appearance!, eyeColor: e.target.value },
                              }))
                            }
                            className="w-full h-8 rounded border"
                          />
                        </div>
                      </div>

                      <div>
                        <label className="text-xs font-medium">‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ: {newCharacter.appearance?.height} ‡¶∏‡ßá‡¶Æ‡¶ø</label>
                        <Slider
                          value={[newCharacter.appearance?.height || 170]}
                          onValueChange={(value) =>
                            setNewCharacter((prev) => ({
                              ...prev,
                              appearance: { ...prev.appearance!, height: value[0] },
                            }))
                          }
                          min={140}
                          max={200}
                          step={1}
                          className="mt-2"
                        />
                      </div>

                      <div>
                        <label className="text-xs font-medium">‡¶ó‡¶°‡¶º‡¶®</label>
                        <select
                          value={newCharacter.appearance?.build}
                          onChange={(e) =>
                            setNewCharacter((prev) => ({
                              ...prev,
                              appearance: { ...prev.appearance!, build: e.target.value as any },
                            }))
                          }
                          className="w-full p-2 border rounded mt-1"
                        >
                          <option value="slim">‡¶ö‡¶ø‡¶ï‡¶®</option>
                          <option value="average">‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï</option>
                          <option value="muscular">‡¶™‡ßá‡¶∂‡ßÄ‡¶¨‡¶π‡ßÅ‡¶≤</option>
                        </select>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Personality */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm flex items-center gap-2">
                        <Heart className="h-4 w-4" />
                        ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <label className="text-xs font-medium">‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø</label>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {personalityTraits.map((trait) => (
                            <Badge
                              key={trait}
                              variant={newCharacter.personality?.traits.includes(trait) ? "default" : "outline"}
                              className="cursor-pointer text-xs"
                              onClick={() => toggleTrait(trait)}
                            >
                              {trait}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <Input
                        placeholder="‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú (‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ñ‡ßÅ‡¶∂‡¶ø, ‡¶∂‡¶æ‡¶®‡ßç‡¶§, ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡ßÄ)"
                        value={newCharacter.personality?.mood}
                        onChange={(e) =>
                          setNewCharacter((prev) => ({
                            ...prev,
                            personality: { ...prev.personality!, mood: e.target.value },
                          }))
                        }
                      />

                      <div>
                        <label className="text-xs font-medium">‡¶∂‡¶ï‡ßç‡¶§‡¶ø: {newCharacter.personality?.energy}%</label>
                        <Slider
                          value={[newCharacter.personality?.energy || 50]}
                          onValueChange={(value) =>
                            setNewCharacter((prev) => ({
                              ...prev,
                              personality: { ...prev.personality!, energy: value[0] },
                            }))
                          }
                          min={0}
                          max={100}
                          step={1}
                          className="mt-2"
                        />
                      </div>

                      <div>
                        <label className="text-xs font-medium">‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨: {newCharacter.personality?.friendliness}%</label>
                        <Slider
                          value={[newCharacter.personality?.friendliness || 50]}
                          onValueChange={(value) =>
                            setNewCharacter((prev) => ({
                              ...prev,
                              personality: { ...prev.personality!, friendliness: value[0] },
                            }))
                          }
                          min={0}
                          max={100}
                          step={1}
                          className="mt-2"
                        />
                      </div>
                    </CardContent>
                  </Card>

                  {/* Clothing */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm flex items-center gap-2">
                        <Shirt className="h-4 w-4" />
                        ‡¶™‡ßã‡¶∂‡¶æ‡¶ï
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <select
                        value={newCharacter.clothing?.style}
                        onChange={(e) =>
                          setNewCharacter((prev) => ({
                            ...prev,
                            clothing: { ...prev.clothing!, style: e.target.value },
                          }))
                        }
                        className="w-full p-2 border rounded"
                      >
                        {clothingStyles.map((style) => (
                          <option key={style} value={style}>
                            {style}
                          </option>
                        ))}
                      </select>

                      <div>
                        <label className="text-xs font-medium">‡¶Ü‡¶®‡ßÅ‡¶∑‡¶æ‡¶ô‡ßç‡¶ó‡¶ø‡¶ï</label>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {accessories.map((accessory) => (
                            <Badge
                              key={accessory}
                              variant={newCharacter.clothing?.accessories.includes(accessory) ? "default" : "outline"}
                              className="cursor-pointer text-xs"
                              onClick={() => toggleAccessory(accessory)}
                            >
                              {accessory}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Background */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm flex items-center gap-2">
                        <Star className="h-4 w-4" />
                        ‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <Input
                        placeholder="‡¶™‡ßá‡¶∂‡¶æ"
                        value={newCharacter.background?.occupation}
                        onChange={(e) =>
                          setNewCharacter((prev) => ({
                            ...prev,
                            background: { ...prev.background!, occupation: e.target.value },
                          }))
                        }
                      />

                      <div>
                        <label className="text-xs font-medium">‡¶∂‡¶ñ</label>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {hobbies.map((hobby) => (
                            <Badge
                              key={hobby}
                              variant={newCharacter.background?.hobbies.includes(hobby) ? "default" : "outline"}
                              className="cursor-pointer text-xs"
                              onClick={() => toggleHobby(hobby)}
                            >
                              {hobby}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <Textarea
                        placeholder="‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ/‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø"
                        value={newCharacter.background?.backstory}
                        onChange={(e) =>
                          setNewCharacter((prev) => ({
                            ...prev,
                            background: { ...prev.background!, backstory: e.target.value },
                          }))
                        }
                      />
                    </CardContent>
                  </Card>
                </div>

                {/* Preview */}
                <div className="lg:sticky lg:top-0">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â</CardTitle>
                    </CardHeader>
                    <CardContent>
                      {newCharacter.name && <CharacterPreview character={newCharacter as Character} />}
                    </CardContent>
                  </Card>
                </div>
              </div>

              <div className="flex gap-2 justify-end mt-6">
                <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                  ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                </Button>
                <Button onClick={createCharacter}>‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
