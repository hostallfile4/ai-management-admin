"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { User, Settings, Save, Download, Sparkles } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface Character {
  id: string
  name: string
  description: string
  personality: string
  appearance: {
    hairColor: string
    eyeColor: string
    skinTone: string
    height: number
    build: string
  }
  traits: string[]
  skills: string[]
  backstory: string
  isActive: boolean
}

export function CustomCharacter() {
  const [characters, setCharacters] = useState<Character[]>([
    {
      id: "1",
      name: "‡¶Ü‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ",
      description: "‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç AI ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û",
      personality: "‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶®, ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡ßÄ, ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡¶∂‡ßÄ‡¶≤",
      appearance: {
        hairColor: "‡¶ï‡¶æ‡¶≤‡ßã",
        eyeColor: "‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡ßÄ",
        skinTone: "‡¶ó‡¶Æ‡ßá‡¶∞ ‡¶∞‡¶Ç",
        height: 165,
        build: "‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø",
      },
      traits: ["‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßÄ", "‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤", "‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø"],
      skills: ["‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç", "AI/ML", "‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®"],
      backstory: "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶∏‡ßç‡¶®‡¶æ‡¶§‡¶ï, AI ‡¶ó‡¶¨‡ßá‡¶∑‡¶£‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßÄ",
      isActive: true,
    },
  ])

  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(characters[0] || null)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null)

  const [newCharacter, setNewCharacter] = useState({
    name: "",
    description: "",
    personality: "",
    hairColor: "",
    eyeColor: "",
    skinTone: "",
    height: 170,
    build: "",
    traits: "",
    skills: "",
    backstory: "",
  })

  const createCharacter = () => {
    if (!newCharacter.name.trim()) {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!",
        description: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    const character: Character = {
      id: Date.now().toString(),
      name: newCharacter.name,
      description: newCharacter.description,
      personality: newCharacter.personality,
      appearance: {
        hairColor: newCharacter.hairColor,
        eyeColor: newCharacter.eyeColor,
        skinTone: newCharacter.skinTone,
        height: newCharacter.height,
        build: newCharacter.build,
      },
      traits: newCharacter.traits
        .split(",")
        .map((t) => t.trim())
        .filter((t) => t),
      skills: newCharacter.skills
        .split(",")
        .map((s) => s.trim())
        .filter((s) => s),
      backstory: newCharacter.backstory,
      isActive: false,
    }

    setCharacters((prev) => [...prev, character])
    setSelectedCharacter(character)
    setNewCharacter({
      name: "",
      description: "",
      personality: "",
      hairColor: "",
      eyeColor: "",
      skinTone: "",
      height: 170,
      build: "",
      traits: "",
      skills: "",
      backstory: "",
    })
    setShowCreateForm(false)

    toast({
      title: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
      description: `"${character.name}" ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const toggleCharacterActive = (characterId: string) => {
    setCharacters((prev) =>
      prev.map((char) => ({
        ...char,
        isActive: char.id === characterId ? !char.isActive : char.isActive,
      })),
    )

    if (selectedCharacter?.id === characterId) {
      setSelectedCharacter((prev) => (prev ? { ...prev, isActive: !prev.isActive } : null))
    }
  }

  const exportCharacter = (character: Character) => {
    const dataStr = JSON.stringify(character, null, 2)
    const dataBlob = new Blob([dataStr], { type: "application/json" })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement("a")
    link.href = url
    link.download = `${character.name}-character.json`
    link.click()
    URL.revokeObjectURL(url)

    toast({
      title: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üì•",
      description: `"${character.name}" ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const generateRandomCharacter = () => {
    const names = ["‡¶∞‡¶π‡¶ø‡¶Æ", "‡¶ï‡¶∞‡¶ø‡¶Æ", "‡¶´‡¶æ‡¶§‡¶ø‡¶Æ‡¶æ", "‡¶Ü‡¶Ø‡¶º‡ßá‡¶∂‡¶æ", "‡¶Ü‡¶≤‡ßÄ", "‡¶π‡¶æ‡¶∏‡¶æ‡¶®", "‡¶ú‡¶æ‡¶∞‡¶ø‡¶®", "‡¶§‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ"]
    const personalities = ["‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£", "‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶ó‡¶Æ‡ßç‡¶≠‡ßÄ‡¶∞", "‡¶π‡¶æ‡¶∏‡ßç‡¶Ø‡¶∞‡¶∏‡¶ø‡¶ï", "‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶®", "‡¶∏‡¶æ‡¶π‡¶∏‡ßÄ", "‡¶¶‡¶Ø‡¶º‡¶æ‡¶≤‡ßÅ"]
    const hairColors = ["‡¶ï‡¶æ‡¶≤‡ßã", "‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡ßÄ", "‡¶ó‡¶æ‡¶¢‡¶º ‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡ßÄ"]
    const eyeColors = ["‡¶ï‡¶æ‡¶≤‡ßã", "‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡ßÄ", "‡¶π‡ßç‡¶Ø‡¶æ‡¶ú‡ßá‡¶≤"]
    const skinTones = ["‡¶´‡¶∞‡ßç‡¶∏‡¶æ", "‡¶ó‡¶Æ‡ßá‡¶∞ ‡¶∞‡¶Ç", "‡¶∂‡ßç‡¶Ø‡¶æ‡¶Æ‡¶≤‡¶æ"]
    const builds = ["‡¶™‡¶æ‡¶§‡¶≤‡¶æ", "‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø", "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶¨‡¶æ‡¶®"]

    const randomName = names[Math.floor(Math.random() * names.length)]
    const randomPersonality = personalities[Math.floor(Math.random() * personalities.length)]

    setNewCharacter({
      name: randomName,
      description: `‡¶è‡¶ï‡¶ú‡¶® ${randomPersonality} ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞‡ßÄ`,
      personality: randomPersonality,
      hairColor: hairColors[Math.floor(Math.random() * hairColors.length)],
      eyeColor: eyeColors[Math.floor(Math.random() * eyeColors.length)],
      skinTone: skinTones[Math.floor(Math.random() * skinTones.length)],
      height: Math.floor(Math.random() * 30) + 150, // 150-180
      build: builds[Math.floor(Math.random() * builds.length)],
      traits: "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï",
      skills: "‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó, ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®",
      backstory: "‡¶è‡¶ï‡¶ú‡¶® ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø",
    })

    toast({
      title: "‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üé≤",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞</h2>
          <p className="text-gray-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={generateRandomCharacter} variant="outline">
            <Sparkles className="h-4 w-4 mr-2" />
            ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
          </Button>
          <Button onClick={() => setShowCreateForm(true)} className="bg-blue-600 hover:bg-blue-700">
            <User className="h-4 w-4 mr-2" />
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Character List */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {characters.map((character) => (
                <div
                  key={character.id}
                  className={`p-3 rounded-lg cursor-pointer transition-colors ${
                    selectedCharacter?.id === character.id
                      ? "bg-blue-100 border-2 border-blue-300"
                      : "bg-gray-50 hover:bg-gray-100"
                  }`}
                  onClick={() => setSelectedCharacter(character)}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium text-sm">{character.name}</div>
                      <div className="text-xs text-gray-600 mt-1">{character.description}</div>
                    </div>
                    <div className="flex flex-col items-end gap-1">
                      {character.isActive && (
                        <Badge className="bg-green-100 text-green-800" variant="outline">
                          ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              ))}

              {characters.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <User className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡ßá‡¶á</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Character Details */}
        <div className="lg:col-span-3">
          {selectedCharacter ? (
            <div className="space-y-6">
              {/* Character Overview */}
              <Card>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        <User className="h-5 w-5" />
                        {selectedCharacter.name}
                      </CardTitle>
                      <p className="text-gray-600 mt-1">{selectedCharacter.description}</p>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" onClick={() => exportCharacter(selectedCharacter)}>
                        <Download className="h-4 w-4" />
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => setEditingCharacter(selectedCharacter)}>
                        <Settings className="h-4 w-4" />
                      </Button>
                      <div className="flex items-center gap-2">
                        <Switch
                          checked={selectedCharacter.isActive}
                          onCheckedChange={() => toggleCharacterActive(selectedCharacter.id)}
                        />
                        <span className="text-sm">‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º</span>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Basic Info */}
                    <div>
                      <h4 className="font-semibold mb-3">‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨:</span>
                          <span>{selectedCharacter.personality}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ:</span>
                          <span>{selectedCharacter.appearance.height} ‡¶∏‡ßá‡¶Æ‡¶ø</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶ó‡¶°‡¶º‡¶®:</span>
                          <span>{selectedCharacter.appearance.build}</span>
                        </div>
                      </div>
                    </div>

                    {/* Appearance */}
                    <div>
                      <h4 className="font-semibold mb-3">‡¶ö‡ßá‡¶π‡¶æ‡¶∞‡¶æ</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶ö‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶∞‡¶Ç:</span>
                          <span>{selectedCharacter.appearance.hairColor}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶ö‡ßã‡¶ñ‡ßá‡¶∞ ‡¶∞‡¶Ç:</span>
                          <span>{selectedCharacter.appearance.eyeColor}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">‡¶§‡ßç‡¶¨‡¶ï‡ßá‡¶∞ ‡¶∞‡¶Ç:</span>
                          <span>{selectedCharacter.appearance.skinTone}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Traits and Skills */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {selectedCharacter.traits.map((trait, index) => (
                        <Badge key={index} variant="outline" className="bg-blue-50 text-blue-800">
                          {trait}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {selectedCharacter.skills.map((skill, index) => (
                        <Badge key={index} variant="outline" className="bg-green-50 text-green-800">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Backstory */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{selectedCharacter.backstory}</p>
                </CardContent>
              </Card>
            </div>
          ) : (
            <Card>
              <CardContent className="text-center py-12">
                <User className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-600 mb-2">‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º</h3>
                <p className="text-gray-500">‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      {/* Create Character Modal */}
      {showCreateForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <CardTitle>‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  placeholder="‡¶®‡¶æ‡¶Æ"
                  value={newCharacter.name}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, name: e.target.value }))}
                />
                <Input
                  placeholder="‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨"
                  value={newCharacter.personality}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, personality: e.target.value }))}
                />
              </div>

              <Textarea
                placeholder="‡¶¨‡¶ø‡¶¨‡¶∞‡¶£"
                value={newCharacter.description}
                onChange={(e) => setNewCharacter((prev) => ({ ...prev, description: e.target.value }))}
              />

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Input
                  placeholder="‡¶ö‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶∞‡¶Ç"
                  value={newCharacter.hairColor}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, hairColor: e.target.value }))}
                />
                <Input
                  placeholder="‡¶ö‡ßã‡¶ñ‡ßá‡¶∞ ‡¶∞‡¶Ç"
                  value={newCharacter.eyeColor}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, eyeColor: e.target.value }))}
                />
                <Input
                  placeholder="‡¶§‡ßç‡¶¨‡¶ï‡ßá‡¶∞ ‡¶∞‡¶Ç"
                  value={newCharacter.skinTone}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, skinTone: e.target.value }))}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶æ: {newCharacter.height} ‡¶∏‡ßá‡¶Æ‡¶ø</label>
                  <Slider
                    value={[newCharacter.height]}
                    onValueChange={(value) => setNewCharacter((prev) => ({ ...prev, height: value[0] }))}
                    max={200}
                    min={140}
                    step={1}
                  />
                </div>
                <Input
                  placeholder="‡¶ó‡¶°‡¶º‡¶®"
                  value={newCharacter.build}
                  onChange={(e) => setNewCharacter((prev) => ({ ...prev, build: e.target.value }))}
                />
              </div>

              <Input
                placeholder="‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø (‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®)"
                value={newCharacter.traits}
                onChange={(e) => setNewCharacter((prev) => ({ ...prev, traits: e.target.value }))}
              />

              <Input
                placeholder="‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ (‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®)"
                value={newCharacter.skills}
                onChange={(e) => setNewCharacter((prev) => ({ ...prev, skills: e.target.value }))}
              />

              <Textarea
                placeholder="‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø"
                value={newCharacter.backstory}
                onChange={(e) => setNewCharacter((prev) => ({ ...prev, backstory: e.target.value }))}
              />

              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                  ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                </Button>
                <Button onClick={createCharacter}>
                  <Save className="h-4 w-4 mr-2" />
                  ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
