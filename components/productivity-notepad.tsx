"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Save,
  Download,
  Upload,
  Copy,
  FileText,
  Search,
  Bold,
  Italic,
  Underline,
  List,
  Hash,
  Calendar,
  Clock,
  Palette,
} from "lucide-react"
import { toast } from "@/hooks/use-toast"

export function ProductivityNotepad() {
  const [content, setContent] = useState("")
  const [fileName, setFileName] = useState("‡¶Ü‡¶Æ‡¶æ‡¶∞-‡¶®‡ßã‡¶ü")
  const [searchTerm, setSearchTerm] = useState("")
  const [wordCount, setWordCount] = useState(0)
  const [charCount, setCharCount] = useState(0)
  const [savedNotes, setSavedNotes] = useState<string[]>([])
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Update word and character count
  useEffect(() => {
    const words = content
      .trim()
      .split(/\s+/)
      .filter((word) => word.length > 0)
    setWordCount(words.length)
    setCharCount(content.length)
  }, [content])

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case "s":
            e.preventDefault()
            saveNote()
            break
          case "o":
            e.preventDefault()
            fileInputRef.current?.click()
            break
          case "n":
            e.preventDefault()
            newNote()
            break
          case "f":
            e.preventDefault()
            document.getElementById("search-input")?.focus()
            break
        }
      }
    }

    document.addEventListener("keydown", handleKeyDown)
    return () => document.removeEventListener("keydown", handleKeyDown)
  }, [content, fileName])

  const saveNote = () => {
    if (content.trim()) {
      const timestamp = new Date().toLocaleString("bn-BD")
      const noteWithTimestamp = `${fileName}\n${timestamp}\n\n${content}`
      setSavedNotes((prev) => [...prev, noteWithTimestamp])
      localStorage.setItem("productivity-notes", JSON.stringify([...savedNotes, noteWithTimestamp]))
      toast({
        title: "‡¶®‡ßã‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
        description: `"${fileName}" ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
      })
    }
  }

  const downloadNote = () => {
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${fileName}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast({
      title: "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! üì•",
      description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const uploadFile = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        const text = e.target?.result as string
        setContent(text)
        setFileName(file.name.replace(".txt", ""))
        toast({
          title: "‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üì§",
          description: `"${file.name}" ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
        })
      }
      reader.readAsText(file)
    }
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(content)
    toast({
      title: "‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üìã",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const newNote = () => {
    setContent("")
    setFileName("‡¶®‡¶§‡ßÅ‡¶®-‡¶®‡ßã‡¶ü")
    toast({
      title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü! üìù",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    })
  }

  const insertTemplate = (template: string) => {
    const templates = {
      meeting: `üìÖ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶®‡ßã‡¶ü - ${new Date().toLocaleDateString("bn-BD")}\n\nüéØ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø:\n\nüë• ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ:\n\nüìù ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ:\n\n‚úÖ ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:\n\nüìã ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡¶¶‡¶ï‡ßç‡¶∑‡ßá‡¶™:\n\n`,
      todo: `üìã ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ - ${new Date().toLocaleDateString("bn-BD")}\n\nüî• ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø:\n‚òê \n‚òê \n\n‚≠ê ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:\n‚òê \n‚òê \n\nüìù ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£:\n‚òê \n‚òê \n\n`,
      project: `üöÄ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ\n\nüìå ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ:\n\nüéØ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø:\n\nüìÖ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ:\n\nüë• ‡¶ü‡¶ø‡¶Æ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø:\n\nüìã ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n‚òê \n‚òê \n‚òê \n\nüí∞ ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü:\n\nüìä ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø:\n\n`,
    }
    setContent((prev) => prev + templates[template as keyof typeof templates])
  }

  const formatText = (format: string) => {
    const textarea = textareaRef.current
    if (!textarea) return

    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selectedText = content.substring(start, end)

    let formattedText = selectedText
    switch (format) {
      case "bold":
        formattedText = `**${selectedText}**`
        break
      case "italic":
        formattedText = `*${selectedText}*`
        break
      case "underline":
        formattedText = `__${selectedText}__`
        break
      case "heading":
        formattedText = `# ${selectedText}`
        break
      case "list":
        formattedText = `‚Ä¢ ${selectedText}`
        break
    }

    const newContent = content.substring(0, start) + formattedText + content.substring(end)
    setContent(newContent)
  }

  const highlightSearchTerm = (text: string) => {
    if (!searchTerm) return text
    const regex = new RegExp(`(${searchTerm})`, "gi")
    return text.replace(regex, "**$1**")
  }

  return (
    <div className="space-y-6">
      {/* Header Controls */}
      <div className="flex flex-wrap gap-4 items-center justify-between">
        <div className="flex gap-2 items-center">
          <Input
            value={fileName}
            onChange={(e) => setFileName(e.target.value)}
            className="w-48"
            placeholder="‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
          />
          <Badge variant="outline" className="bg-blue-50">
            {wordCount} ‡¶∂‡¶¨‡ßç‡¶¶ | {charCount} ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞
          </Badge>
        </div>

        <div className="flex gap-2">
          <Button onClick={newNote} variant="outline" size="sm">
            <FileText className="h-4 w-4 mr-1" />
            ‡¶®‡¶§‡ßÅ‡¶®
          </Button>
          <Button onClick={saveNote} variant="outline" size="sm">
            <Save className="h-4 w-4 mr-1" />
            ‡¶∏‡ßá‡¶≠
          </Button>
          <Button onClick={downloadNote} variant="outline" size="sm">
            <Download className="h-4 w-4 mr-1" />
            ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
          </Button>
          <Button onClick={() => fileInputRef.current?.click()} variant="outline" size="sm">
            <Upload className="h-4 w-4 mr-1" />
            ‡¶Ü‡¶™‡¶≤‡ßã‡¶°
          </Button>
          <Button onClick={copyToClipboard} variant="outline" size="sm">
            <Copy className="h-4 w-4 mr-1" />
            ‡¶ï‡¶™‡¶ø
          </Button>
        </div>
      </div>

      {/* Search Bar */}
      <div className="flex gap-2 items-center">
        <Search className="h-4 w-4 text-gray-500" />
        <Input
          id="search-input"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®... (Ctrl+F)"
          className="max-w-md"
        />
      </div>

      {/* Formatting Toolbar */}
      <div className="flex flex-wrap gap-2 p-3 bg-gray-50 rounded-lg">
        <Button onClick={() => formatText("bold")} variant="outline" size="sm">
          <Bold className="h-4 w-4" />
        </Button>
        <Button onClick={() => formatText("italic")} variant="outline" size="sm">
          <Italic className="h-4 w-4" />
        </Button>
        <Button onClick={() => formatText("underline")} variant="outline" size="sm">
          <Underline className="h-4 w-4" />
        </Button>
        <Button onClick={() => formatText("heading")} variant="outline" size="sm">
          <Hash className="h-4 w-4" />
        </Button>
        <Button onClick={() => formatText("list")} variant="outline" size="sm">
          <List className="h-4 w-4" />
        </Button>

        <div className="border-l mx-2"></div>

        <Button onClick={() => insertTemplate("meeting")} variant="outline" size="sm">
          <Calendar className="h-4 w-4 mr-1" />
          ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç
        </Button>
        <Button onClick={() => insertTemplate("todo")} variant="outline" size="sm">
          <Clock className="h-4 w-4 mr-1" />
          ‡¶ü‡ßÅ‡¶°‡ßÅ
        </Button>
        <Button onClick={() => insertTemplate("project")} variant="outline" size="sm">
          <Palette className="h-4 w-4 mr-1" />
          ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü
        </Button>
      </div>

      {/* Main Text Area */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Textarea
            ref={textareaRef}
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®... 

‡¶∂‡¶∞‡ßç‡¶ü‡¶ï‡¶æ‡¶ü ‡¶ï‡ßÄ:
‚Ä¢ Ctrl+S = ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ Ctrl+O = ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®  
‚Ä¢ Ctrl+N = ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü
‚Ä¢ Ctrl+F = ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®

‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá!"
            className="min-h-[500px] font-mono text-sm leading-relaxed"
          />
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          {/* Quick Stats */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <div className="flex justify-between">
                <span>‡¶∂‡¶¨‡ßç‡¶¶:</span>
                <Badge>{wordCount}</Badge>
              </div>
              <div className="flex justify-between">
                <span>‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞:</span>
                <Badge>{charCount}</Badge>
              </div>
              <div className="flex justify-between">
                <span>‡¶≤‡¶æ‡¶á‡¶®:</span>
                <Badge>{content.split("\n").length}</Badge>
              </div>
              <div className="flex justify-between">
                <span>‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶ó‡ßç‡¶∞‡¶æ‡¶´:</span>
                <Badge>{content.split("\n\n").length}</Badge>
              </div>
            </CardContent>
          </Card>

          {/* Shortcuts Help */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">‡¶∂‡¶∞‡ßç‡¶ü‡¶ï‡¶æ‡¶ü ‡¶ï‡ßÄ</CardTitle>
            </CardHeader>
            <CardContent className="text-xs space-y-1">
              <div>
                <kbd className="bg-gray-100 px-1 rounded">Ctrl+S</kbd> ‡¶∏‡ßá‡¶≠
              </div>
              <div>
                <kbd className="bg-gray-100 px-1 rounded">Ctrl+O</kbd> ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
              </div>
              <div>
                <kbd className="bg-gray-100 px-1 rounded">Ctrl+N</kbd> ‡¶®‡¶§‡ßÅ‡¶®
              </div>
              <div>
                <kbd className="bg-gray-100 px-1 rounded">Ctrl+F</kbd> ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
              </div>
            </CardContent>
          </Card>

          {/* Recent Notes */}
          {savedNotes.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶®‡ßã‡¶ü</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 max-h-40 overflow-y-auto">
                  {savedNotes
                    .slice(-5)
                    .reverse()
                    .map((note, index) => (
                      <div
                        key={index}
                        className="p-2 bg-gray-50 rounded text-xs cursor-pointer hover:bg-gray-100"
                        onClick={() => setContent(note.split("\n\n").slice(1).join("\n\n"))}
                      >
                        {note.split("\n")[0]}
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      {/* Hidden file input */}
      <input ref={fileInputRef} type="file" accept=".txt,.md" onChange={uploadFile} className="hidden" />
    </div>
  )
}
