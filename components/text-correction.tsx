"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CheckCircle, AlertCircle, FileText, Zap, Copy, Download } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface CorrectionSuggestion {
  id: string
  type: "grammar" | "spelling" | "style" | "punctuation"
  original: string
  suggestion: string
  explanation: string
  position: { start: number; end: number }
}

export function TextCorrection() {
  const [inputText, setInputText] = useState("")
  const [correctedText, setCorrectedText] = useState("")
  const [suggestions, setSuggestions] = useState<CorrectionSuggestion[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [activeTab, setActiveTab] = useState("input")

  // Mock correction function - in real app, this would call an AI service
  const analyzeText = async () => {
    if (!inputText.trim()) {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!",
        description: "‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    setIsAnalyzing(true)

    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Mock suggestions
    const mockSuggestions: CorrectionSuggestion[] = [
      {
        id: "1",
        type: "grammar",
        original: "‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡¶æ‡¶á‡¶§‡ßá‡¶õ‡¶ø",
        suggestion: "‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø",
        explanation: "‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ '‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®",
        position: { start: 0, end: 10 },
      },
      {
        id: "2",
        type: "spelling",
        original: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂",
        suggestion: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂",
        explanation: "‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá",
        position: { start: 15, end: 23 },
      },
      {
        id: "3",
        type: "punctuation",
        original: "‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®",
        suggestion: "‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®?",
        explanation: "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶¨‡ßã‡¶ß‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®",
        position: { start: 25, end: 35 },
      },
    ]

    setSuggestions(mockSuggestions)

    // Apply corrections
    let corrected = inputText
    mockSuggestions.forEach((suggestion) => {
      corrected = corrected.replace(suggestion.original, suggestion.suggestion)
    })
    setCorrectedText(corrected)

    setIsAnalyzing(false)
    setActiveTab("results")

    toast({
      title: "‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‚úÖ",
      description: `${mockSuggestions.length}‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const applySuggestion = (suggestionId: string) => {
    const suggestion = suggestions.find((s) => s.id === suggestionId)
    if (!suggestion) return

    const newText = inputText.replace(suggestion.original, suggestion.suggestion)
    setInputText(newText)
    setCorrectedText(newText)

    // Remove applied suggestion
    setSuggestions((prev) => prev.filter((s) => s.id !== suggestionId))

    toast({
      title: "‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üìã",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const downloadText = (text: string, filename: string) => {
    const blob = new Blob([text], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! üì•",
      description: "‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const getSuggestionTypeColor = (type: string) => {
    switch (type) {
      case "grammar":
        return "bg-red-100 text-red-800"
      case "spelling":
        return "bg-blue-100 text-blue-800"
      case "style":
        return "bg-green-100 text-green-800"
      case "punctuation":
        return "bg-yellow-100 text-yellow-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getSuggestionTypeText = (type: string) => {
    switch (type) {
      case "grammar":
        return "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£"
      case "spelling":
        return "‡¶¨‡¶æ‡¶®‡¶æ‡¶®"
      case "style":
        return "‡¶∂‡ßà‡¶≤‡ßÄ"
      case "punctuation":
        return "‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®"
      default:
        return "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"
    }
  }

  const stats = {
    total: suggestions.length,
    grammar: suggestions.filter((s) => s.type === "grammar").length,
    spelling: suggestions.filter((s) => s.type === "spelling").length,
    style: suggestions.filter((s) => s.type === "style").length,
    punctuation: suggestions.filter((s) => s.type === "punctuation").length,
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</h2>
          <p className="text-gray-600">‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ</p>
        </div>
        <Button onClick={analyzeText} disabled={isAnalyzing} className="bg-blue-600 hover:bg-blue-700">
          {isAnalyzing ? (
            <>
              <Zap className="h-4 w-4 mr-2 animate-spin" />
              ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶õ‡¶ø...
            </>
          ) : (
            <>
              <Zap className="h-4 w-4 mr-2" />
              ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
            </>
          )}
        </Button>
      </div>

      {/* Stats */}
      {suggestions.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
              <div className="text-sm text-gray-600">‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-red-600">{stats.grammar}</div>
              <div className="text-sm text-gray-600">‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.spelling}</div>
              <div className="text-sm text-gray-600">‡¶¨‡¶æ‡¶®‡¶æ‡¶®</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">{stats.style}</div>
              <div className="text-sm text-gray-600">‡¶∂‡ßà‡¶≤‡ßÄ</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">{stats.punctuation}</div>
              <div className="text-sm text-gray-600">‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="input">‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶á‡¶®‡¶™‡ßÅ‡¶ü</TabsTrigger>
          <TabsTrigger value="suggestions">‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®</TabsTrigger>
          <TabsTrigger value="results">‡¶´‡¶≤‡¶æ‡¶´‡¶≤</TabsTrigger>
        </TabsList>

        {/* Input Tab */}
        <TabsContent value="input">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Textarea
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  placeholder="‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ø‡¶æ ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®...

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡¶æ‡¶á‡¶§‡ßá‡¶õ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶ø
‡¶Ü‡¶Æ‡¶ø ‡¶≠‡¶æ‡¶≤ ‡¶Ü‡¶õ‡¶ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶"
                  className="min-h-[300px] font-mono text-sm leading-relaxed"
                />

                <div className="flex justify-between items-center">
                  <div className="text-sm text-gray-500">
                    {inputText.length} ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ | {inputText.split(/\s+/).filter((w) => w.length > 0).length} ‡¶∂‡¶¨‡ßç‡¶¶
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" onClick={() => setInputText("")}>
                      ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => copyToClipboard(inputText)}>
                      <Copy className="h-4 w-4 mr-1" />
                      ‡¶ï‡¶™‡¶ø
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Suggestions Tab */}
        <TabsContent value="suggestions">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertCircle className="h-5 w-5" />
                ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®
              </CardTitle>
            </CardHeader>
            <CardContent>
              {suggestions.length > 0 ? (
                <div className="space-y-4">
                  {suggestions.map((suggestion) => (
                    <div key={suggestion.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <Badge className={getSuggestionTypeColor(suggestion.type)} variant="outline">
                            {getSuggestionTypeText(suggestion.type)}
                          </Badge>
                        </div>
                        <Button size="sm" onClick={() => applySuggestion(suggestion.id)}>
                          ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                        </Button>
                      </div>

                      <div className="space-y-2">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <span className="text-sm font-medium text-red-600">‡¶Ü‡¶ó‡ßá:</span>
                            <div className="bg-red-50 p-2 rounded text-sm">{suggestion.original}</div>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-green-600">‡¶™‡¶∞‡ßá:</span>
                            <div className="bg-green-50 p-2 rounded text-sm">{suggestion.suggestion}</div>
                          </div>
                        </div>
                        <div>
                          <span className="text-sm font-medium text-gray-600">‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:</span>
                          <p className="text-sm text-gray-700 mt-1">{suggestion.explanation}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <AlertCircle className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-semibold mb-2">‡¶ï‡ßã‡¶® ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶®‡ßá‡¶á</h3>
                  <p>‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Results Tab */}
        <TabsContent value="results">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5" />
                  ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
                </CardTitle>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm" onClick={() => copyToClipboard(correctedText)}>
                    <Copy className="h-4 w-4 mr-1" />
                    ‡¶ï‡¶™‡¶ø
                  </Button>
                  <Button variant="outline" size="sm" onClick={() => downloadText(correctedText, "‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§-‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü.txt")}>
                    <Download className="h-4 w-4 mr-1" />
                    ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {correctedText ? (
                <div className="space-y-4">
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="whitespace-pre-wrap font-mono text-sm leading-relaxed">{correctedText}</div>
                  </div>

                  <div className="text-sm text-gray-500">
                    ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü: {correctedText.length} ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ |{" "}
                    {correctedText.split(/\s+/).filter((w) => w.length > 0).length} ‡¶∂‡¶¨‡ßç‡¶¶
                  </div>
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <CheckCircle className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-semibold mb-2">‡¶ï‡ßã‡¶® ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶®‡ßá‡¶á</h3>
                  <p>‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
