"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { FileText, CheckCircle, AlertCircle, Copy, Download, Wand2, RotateCcw } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface CorrectionSuggestion {
  original: string
  corrected: string
  type: "spelling" | "grammar" | "punctuation" | "style"
  explanation: string
  position: { start: number; end: number }
}

export function TextCorrection() {
  const [originalText, setOriginalText] = useState("")
  const [correctedText, setCorrectedText] = useState("")
  const [suggestions, setSuggestions] = useState<CorrectionSuggestion[]>([])
  const [isProcessing, setIsProcessing] = useState(false)
  const [showSuggestions, setShowSuggestions] = useState(false)

  // Common Bengali spelling corrections
  const bengaliCorrections = {
    ‡¶ï‡ßã‡¶∞‡¶æ‡¶®: "‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶®",
    ‡¶®‡¶æ‡¶Æ‡¶æ‡¶Ø: "‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú",
    ‡¶∞‡ßã‡¶Ø‡¶æ: "‡¶∞‡ßã‡¶ú‡¶æ",
    ‡¶π‡¶ú‡ßç‡¶ú: "‡¶π‡¶ú",
    ‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§: "‡¶ú‡¶æ‡¶ï‡¶æ‡¶§",
    ‡¶á‡¶®‡¶∂‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π",
    ‡¶Æ‡¶æ‡¶∂‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶Æ‡¶æ‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π",
    ‡¶∏‡ßÅ‡¶¨‡¶π‡¶æ‡¶®‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶∏‡ßÅ‡¶¨‡¶π‡¶æ‡¶®‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶ø",
    ‡¶Ü‡¶≤‡¶π‡¶æ‡¶Æ‡¶¶‡ßÅ‡¶≤‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶Ü‡¶≤‡¶π‡¶æ‡¶Æ‡¶¶‡ßÅ‡¶≤‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶ø",
    ‡¶Ü‡¶∏‡ßç‡¶§‡¶æ‡¶ó‡¶´‡¶ø‡¶∞‡ßÅ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶Ü‡¶∏‡ßç‡¶§‡¶æ‡¶ó‡¶´‡¶ø‡¶∞‡ßÅ‡¶≤‡ßç‡¶≤‡¶æ‡¶π",
    ‡¶¨‡¶ø‡¶∏‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶¨‡¶ø‡¶∏‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶ø‡¶∞ ‡¶∞‡¶æ‡¶π‡¶Æ‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∞‡¶æ‡¶π‡¶ø‡¶Æ",
    ‡¶ú‡¶æ‡¶Ø‡¶æ‡¶ï‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶ú‡¶æ‡¶Ø‡¶æ‡¶ï‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßÅ ‡¶ñ‡¶æ‡¶á‡¶∞‡¶æ‡¶®",
    ‡¶¨‡¶æ‡¶∞‡¶æ‡¶ï‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π: "‡¶¨‡¶æ‡¶∞‡¶æ‡¶ï‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßÅ ‡¶´‡¶ø‡¶ï‡ßÅ‡¶Æ",
  }

  // Grammar rules for Bengali
  const grammarRules = [
    {
      pattern: /\s+/g,
      replacement: " ",
      type: "spacing" as const,
      explanation: "‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
    },
    {
      pattern: /([‡•§!?])\s*([‡•§!?])/g,
      replacement: "$1 $2",
      type: "punctuation" as const,
      explanation: "‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡ßç‡¶™‡ßá‡¶∏‡¶ø‡¶Ç",
    },
    {
      pattern: /([‡•§!?])\s*([a-zA-Z‡¶Ö-‡¶π])/g,
      replacement: "$1 $2",
      type: "punctuation" as const,
      explanation: "‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
    },
  ]

  const processText = async () => {
    if (!originalText.trim()) {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!",
        description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    setIsProcessing(true)
    setShowSuggestions(false)

    // Simulate processing delay
    await new Promise((resolve) => setTimeout(resolve, 1500))

    let processedText = originalText
    const foundSuggestions: CorrectionSuggestion[] = []

    // Apply Bengali spelling corrections
    Object.entries(bengaliCorrections).forEach(([wrong, correct]) => {
      const regex = new RegExp(wrong, "g")
      let match
      while ((match = regex.exec(originalText)) !== null) {
        foundSuggestions.push({
          original: wrong,
          corrected: correct,
          type: "spelling",
          explanation: `"${wrong}" ‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® "${correct}"`,
          position: { start: match.index, end: match.index + wrong.length },
        })
      }
      processedText = processedText.replace(regex, correct)
    })

    // Apply grammar rules
    grammarRules.forEach((rule) => {
      const matches = [...originalText.matchAll(rule.pattern)]
      matches.forEach((match) => {
        if (match.index !== undefined) {
          foundSuggestions.push({
            original: match[0],
            corrected: match[0].replace(rule.pattern, rule.replacement),
            type: rule.type,
            explanation: rule.explanation,
            position: { start: match.index, end: match.index + match[0].length },
          })
        }
      })
      processedText = processedText.replace(rule.pattern, rule.replacement)
    })

    // Additional style suggestions
    if (processedText.includes("‡¶Ü‡¶Æ‡¶ø")) {
      const matches = [...processedText.matchAll(/‡¶Ü‡¶Æ‡¶ø/g)]
      matches.forEach((match) => {
        if (match.index !== undefined) {
          foundSuggestions.push({
            original: "‡¶Ü‡¶Æ‡¶ø",
            corrected: "‡¶Ü‡¶Æ‡¶ø",
            type: "style",
            explanation: '‡¶´‡¶∞‡ßç‡¶Æ‡¶æ‡¶≤ ‡¶≤‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º "‡¶Ü‡¶Æ‡¶ø" ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá "‡¶Ü‡¶Æ‡¶∞‡¶æ" ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá',
            position: { start: match.index, end: match.index + 2 },
          })
        }
      })
    }

    setCorrectedText(processedText)
    setSuggestions(foundSuggestions)
    setIsProcessing(false)
    setShowSuggestions(true)

    toast({
      title: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‚úÖ",
      description: `${foundSuggestions.length}‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßÄ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const applySuggestion = (index: number) => {
    const suggestion = suggestions[index]
    const newText = correctedText.replace(suggestion.original, suggestion.corrected)
    setCorrectedText(newText)

    // Remove applied suggestion
    setSuggestions((prev) => prev.filter((_, i) => i !== index))

    toast({
      title: "‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßÄ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
      description: `"${suggestion.original}" ‚Üí "${suggestion.corrected}"`,
    })
  }

  const copyText = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üìã",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const downloadText = (text: string, filename: string) => {
    const blob = new Blob([text], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! üì•",
      description: "‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const resetText = () => {
    setOriginalText("")
    setCorrectedText("")
    setSuggestions([])
    setShowSuggestions(false)

    toast({
      title: "‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üîÑ",
      description: "‡¶∏‡¶¨ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const getSuggestionTypeColor = (type: string) => {
    switch (type) {
      case "spelling":
        return "bg-red-100 text-red-800 border-red-200"
      case "grammar":
        return "bg-blue-100 text-blue-800 border-blue-200"
      case "punctuation":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "style":
        return "bg-purple-100 text-purple-800 border-purple-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSuggestionTypeText = (type: string) => {
    switch (type) {
      case "spelling":
        return "‡¶¨‡¶æ‡¶®‡¶æ‡¶®"
      case "grammar":
        return "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£"
      case "punctuation":
        return "‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®"
      case "style":
        return "‡¶∂‡ßà‡¶≤‡ßÄ"
      default:
        return "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</h2>
          <p className="text-gray-600">‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡¶æ‡¶®‡¶æ‡¶®, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßà‡¶≤‡ßÄ ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={resetText} variant="outline">
            <RotateCcw className="h-4 w-4 mr-2" />
            ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              ‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              value={originalText}
              onChange={(e) => setOriginalText(e.target.value)}
              placeholder="‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶ú ‡¶®‡¶æ‡¶Æ‡¶æ‡¶Ø ‡¶™‡¶°‡¶º‡ßá‡¶õ‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶∞‡¶æ‡¶® ‡¶§‡ßá‡¶≤‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶§ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§ ‡¶á‡¶®‡¶∂‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶∞‡ßã‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶¨‡•§ ‡¶Ü‡¶≤‡¶π‡¶æ‡¶Æ‡¶¶‡ßÅ‡¶≤‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡•§"
              className="min-h-[300px] font-mono text-sm"
            />

            <div className="flex gap-2">
              <Button
                onClick={processText}
                disabled={isProcessing || !originalText.trim()}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isProcessing ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£...
                  </>
                ) : (
                  <>
                    <Wand2 className="h-4 w-4 mr-2" />
                    ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                  </>
                )}
              </Button>

              <Button onClick={() => copyText(originalText)} variant="outline" disabled={!originalText.trim()}>
                <Copy className="h-4 w-4 mr-2" />
                ‡¶ï‡¶™‡¶ø
              </Button>

              <Button
                onClick={() => downloadText(originalText, "original-text.txt")}
                variant="outline"
                disabled={!originalText.trim()}
              >
                <Download className="h-4 w-4 mr-2" />
                ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
              </Button>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-3 gap-4 text-sm">
              <div className="text-center p-2 bg-gray-50 rounded">
                <div className="font-bold text-blue-600">{originalText.length}</div>
                <div className="text-gray-600">‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞</div>
              </div>
              <div className="text-center p-2 bg-gray-50 rounded">
                <div className="font-bold text-green-600">
                  {
                    originalText
                      .trim()
                      .split(/\s+/)
                      .filter((word) => word.length > 0).length
                  }
                </div>
                <div className="text-gray-600">‡¶∂‡¶¨‡ßç‡¶¶</div>
              </div>
              <div className="text-center p-2 bg-gray-50 rounded">
                <div className="font-bold text-purple-600">{originalText.split("\n").length}</div>
                <div className="text-gray-600">‡¶≤‡¶æ‡¶á‡¶®</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Output Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              value={correctedText}
              onChange={(e) => setCorrectedText(e.target.value)}
              placeholder="‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá..."
              className="min-h-[300px] font-mono text-sm"
              readOnly={!correctedText}
            />

            <div className="flex gap-2">
              <Button onClick={() => copyText(correctedText)} variant="outline" disabled={!correctedText.trim()}>
                <Copy className="h-4 w-4 mr-2" />
                ‡¶ï‡¶™‡¶ø
              </Button>

              <Button
                onClick={() => downloadText(correctedText, "corrected-text.txt")}
                variant="outline"
                disabled={!correctedText.trim()}
              >
                <Download className="h-4 w-4 mr-2" />
                ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
              </Button>
            </div>

            {/* Improvement Stats */}
            {correctedText && (
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="text-center p-2 bg-green-50 rounded">
                  <div className="font-bold text-green-600">{suggestions.length}</div>
                  <div className="text-gray-600">‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßÄ</div>
                </div>
                <div className="text-center p-2 bg-blue-50 rounded">
                  <div className="font-bold text-blue-600">
                    {Math.round(((originalText.length - correctedText.length) / originalText.length) * 100) || 0}%
                  </div>
                  <div className="text-gray-600">‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø</div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Suggestions */}
      {showSuggestions && suggestions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5" />
              ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßÄ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ({suggestions.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {suggestions.map((suggestion, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <div className="flex justify-between items-start mb-2">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge className={getSuggestionTypeColor(suggestion.type)} variant="outline">
                          {getSuggestionTypeText(suggestion.type)}
                        </Badge>
                      </div>

                      <div className="text-sm space-y-1">
                        <div>
                          <span className="text-gray-600">‡¶Æ‡ßÇ‡¶≤:</span>
                          <span className="ml-2 bg-red-100 px-2 py-1 rounded text-red-800">
                            "{suggestion.original}"
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-600">‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§:</span>
                          <span className="ml-2 bg-green-100 px-2 py-1 rounded text-green-800">
                            "{suggestion.corrected}"
                          </span>
                        </div>
                        <div className="text-gray-600 text-xs">{suggestion.explanation}</div>
                      </div>
                    </div>

                    <Button onClick={() => applySuggestion(index)} size="sm" className="ml-4">
                      ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Help Section */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ì ‡¶ü‡¶ø‡¶™‡¶∏</CardTitle>
        </CardHeader>
        <CardContent className="text-sm space-y-2">
          <div>
            <strong>‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®:</strong> ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶π‡¶¨‡ßá
          </div>
          <div>
            <strong>‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ:</strong> ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶ó‡¶†‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
          </div>
          <div>
            <strong>‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®:</strong> ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶™‡ßá‡¶∏‡¶ø‡¶Ç ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
          </div>
          <div>
            <strong>‡¶∂‡ßà‡¶≤‡ßÄ ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø:</strong> ‡¶Ü‡¶∞‡¶ì ‡¶≠‡¶æ‡¶≤ ‡¶≤‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá
          </div>
          <div>
            <strong>‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶≠‡¶æ‡¶∑‡¶æ:</strong> ‡¶Ü‡¶∞‡¶¨‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
